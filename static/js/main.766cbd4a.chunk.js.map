{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onsearchchange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAaeA,G,WAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,eAClB,OACI,6BACE,2BAAQC,UAAW,uCAChBC,KAAM,SACNC,YAAY,sBACZC,SAAWJ,OCKPK,EAXF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAClB,OACI,yBAAKP,UAAU,sDACX,yBAAKQ,IAAK,QAAQC,IAAG,+BAA2BJ,KAChD,6BACI,4BAAKC,GACL,2BAAIC,MCKNG,EAXA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEd,OACC,6BACIA,EAAOC,IAAI,SAACC,EAAKC,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAKR,GAAIA,GAAIQ,EAAKR,GAAIC,KAAMO,EAAKP,KAAMC,MAAOM,EAAKN,YCChES,EAPA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCgDCC,E,YA3Cb,aAAc,IAAD,8BACX,+CAaDC,eAAe,SAACC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAb1C,EAAKC,MAAO,CACTnB,OAAS,GACTgB,YAAc,IAJN,E,iFAQO,IAAD,OACjBI,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACf,OAAOwB,Q,+BAQ9B,IAAD,OACAC,EAAeC,KAAKP,MAAMnB,OAAO2B,OAAO,SAACC,GAC3C,OAAOA,EAAMjC,KAAKkC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,iBAGpE,OAAmB,IADHH,KAAKP,MAAfnB,OACI+B,OACA,yCAGF,yBAAK1C,UAAU,OACb,4BAAQA,UAAU,MAChB,4CACA,kBAAC,EAAD,CAAWD,eAAgBsC,KAAKb,kBAElC,iCACE,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUb,OAAQyB,W,GArCjBO,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACH,6BACO,kBAAC,EAAD,OAEPC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,gB","file":"static/js/main.766cbd4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst SearchBox = ({onsearchchange})=>{\r\n  return (\r\n      <div>\r\n        <input  className =\"ma2 pa3 ba b--green bg-lightest-blue\"\r\n           type= \"search\"\r\n           placeholder=\"find the robofriend\"\r\n           onChange ={onsearchchange} />\r\n      </div>\r\n  );\r\n}\r\nexport default SearchBox;","import React from 'react'\r\n\r\n\r\nconst Card = ({id,name,email}) =>{\r\n     return (\r\n         <div className=\"tc bg-light-blue dib br3 pa1 ma4 grow bw2 shadow-5\">\r\n             <img alt =\"Robot\" src ={`https://robohash.org/${id}`} />\r\n             <div>\r\n                 <h2>{name}</h2>\r\n                 <p>{email}</p>\r\n             </div>\r\n         </div>\r\n     );\r\n}\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n   // const cardComponents = \r\n   return(\r\n    <div>\r\n     {  robots.map((user,i)=>{\r\n          return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n        })\r\n     }\r\n   </div>\r\n  )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Scroll = (props)=> {\r\n  return( \r\n    <div style = {{overflowY:'scroll', border:'5px solid black', height: '500px'}}>  \r\n       {props.children}\r\n   </div>\r\n    );\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport './App.css';\r\nimport SearchBox from '../components/SearchBox'\r\n//import {robots} from './robots'\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport 'tachyons'\r\n\r\nclass App extends React.Component {\r\n \r\n  constructor(){\r\n    super(); \r\n    this.state ={\r\n       robots : [],\r\n       searchfield : ''\r\n     }\r\n   }\r\n  \r\n  componentDidMount(){\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots:users}))\r\n  }\r\n \r\n   onSearchChange=(event)=>{\r\n      this.setState({searchfield:event.target.value})\r\n    //  console.log(event.target.value);\r\n  }\r\n \r\n  render(){\r\n    const filterRobots = this.state.robots.filter((robot)=>{\r\n        return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n   });\r\n   const {robots} = this.state;\r\n    if(robots.length===0){\r\n       return <h1>Loading..</h1>\r\n    }else{\r\n       return (\r\n            <div className=\"App\">\r\n              <header className=\"tc\">\r\n                <h1> RoboFriends</h1>\r\n                <SearchBox onsearchchange={this.onSearchChange} />     \r\n              </header>\r\n              <section>\r\n                <Scroll>\r\n                 <CardList robots={filterRobots} />\r\n                </Scroll>\r\n              </section>\r\n            </div>\r\n       );\r\n    } \r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n      <div>\r\n             <App />\r\n      </div>       \r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}