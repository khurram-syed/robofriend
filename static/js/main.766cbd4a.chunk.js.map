{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onsearchchange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAaeA,G,WAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,eAClB,OACI,6BACE,2BAAQC,UAAW,uCAChBC,KAAM,SACNC,YAAY,sBACZC,SAAWJ,OCKPK,EAXF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAClB,OACI,yBAAKP,UAAU,sDACX,yBAAKQ,IAAK,QAAQC,IAAG,+BAA2BJ,KAChD,6BACI,4BAAKC,GACL,2BAAIC,MCKNG,EAXA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEd,OACC,6BACIA,EAAOC,IAAI,SAACC,EAAKC,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAKR,GAAIA,GAAIQ,EAAKR,GAAIC,KAAMO,EAAKP,KAAMC,MAAOM,EAAKN,YCChES,EAPA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCgDCC,E,YA3Cb,aAAc,IAAD,8BACX,+CAaDC,eAAe,SAACC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAb1C,EAAKC,MAAO,CACTnB,OAAS,GACTgB,YAAc,IAJN,E,iFAQO,IAAD,OACjBI,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACf,OAAOwB,Q,+BAQ9B,IAAD,OACAC,EAAeC,KAAKP,MAAMnB,OAAO2B,OAAO,SAACC,GAC3C,OAAOA,EAAMjC,KAAKkC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,iBAGpE,OAAmB,IADHH,KAAKP,MAAfnB,OACI+B,OACA,yCAGF,yBAAK1C,UAAU,OACb,4BAAQA,UAAU,MAChB,4CACA,kBAAC,EAAD,CAAWD,eAAgBsC,KAAKb,kBAElC,iCACE,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUb,OAAQyB,W,GArCjBO,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACH,6BACO,kBAAC,EAAD,OAEPC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,gB","file":"static/js/main.766cbd4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst SearchBox = ({onsearchchange})=>{\r\n  return (\r\n      <div>\r\n        <input  className =\"ma2 pa3 ba b--green bg-lightest-blue\"\r\n           type= \"search\"\r\n           placeholder=\"find the robofriend\"\r\n           onChange ={onsearchchange} />\r\n      </div>\r\n  );\r\n}\r\nexport default SearchBox;","import React from 'react'\r\n\r\n\r\nconst Card = ({id,name,email}) =>{\r\n     return (\r\n         <div className=\"tc bg-light-blue dib br3 pa1 ma4 grow bw2 shadow-5\">\r\n             <img alt =\"Robot\" src ={`https://robohash.org/${id}`} />\r\n             <div>\r\n                 <h2>{name}</h2>\r\n                 <p>{email}</p>\r\n             </div>\r\n         </div>\r\n     );\r\n}\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n   // const cardComponents = \r\n   return(\r\n    <div>\r\n     {  robots.map((user,i)=>{\r\n          return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n        })\r\n     }\r\n   </div>\r\n  )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Scroll = (props)=> {\r\n  return( \r\n    <div style = {{overflowY:'scroll', border:'5px solid black', height: '500px'}}>  \r\n       {props.children}\r\n   </div>\r\n    );\r\n}\r\nexport default Scroll;","import React from 'react';\nimport './App.css';\nimport SearchBox from '../components/SearchBox'\n//import {robots} from './robots'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport 'tachyons'\n\nclass App extends React.Component {\n \n  constructor(){\n    super(); \n    this.state ={\n       robots : [],\n       searchfield : ''\n     }\n   }\n  \n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({robots:users}))\n  }\n \n   onSearchChange=(event)=>{\n      this.setState({searchfield:event.target.value})\n    //  console.log(event.target.value);\n  }\n \n  render(){\n    const filterRobots = this.state.robots.filter((robot)=>{\n        return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n   });\n   const {robots} = this.state;\n    if(robots.length===0){\n       return <h1>Loading..</h1>\n    }else{\n       return (\n            <div className=\"App\">\n              <header className=\"tc\">\n                <h1> RoboFriends</h1>\n                <SearchBox onsearchchange={this.onSearchChange} />     \n              </header>\n              <section>\n                <Scroll>\n                 <CardList robots={filterRobots} />\n                </Scroll>\n              </section>\n            </div>\n       );\n    } \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <div>\n             <App />\n      </div>       \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}